{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["mediaDevices","navigator","getDevices","a","enumerateDevices","devices","vDevices","aDevices","console","log","forEach","device","kind","deviceId","label","push","getStream","audioDeviceId","videoDeviceId","getUserMedia","video","audio","stream","App","useState","peer","setPeer","join","setJoin","room","setRoom","videoDevices","setVideoDevices","audioDevices","setAudioDevices","setVideoDeviceId","setAudioDeviceId","localVideoRef","useRef","refreshDevices","useCallback","useEffect","p","Peer","key","debug","on","id","current","srcObject","play","replaceStream","open","r","joinRoom","className","htmlFor","value","onChange","e","currentTarget","map","onClick","_","ref","width","autoPlay","muted","playsInline","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1a737ffc.chunk.js","sourcesContent":["import React, {\n  useState,\n  useEffect,\n  useCallback,\n  useRef,\n} from 'react';\nimport Peer, { MeshRoom } from 'skyway-js';\nimport './App.css';\n\nconst mediaDevices = navigator.mediaDevices;\nasync function getDevices() {\n  const devices = await mediaDevices.enumerateDevices();\n  const vDevices: MediaDeviceInfo[] = [];\n  const aDevices: MediaDeviceInfo[] = [];\n  console.log(devices);\n  devices.forEach((device) => {\n    const { kind, deviceId, label } = device;\n    switch (kind) {\n      case \"audioinput\":\n        aDevices.push(device);\n        break;\n      case \"videoinput\":\n        vDevices.push(device);\n        break;\n    }\n  });\n  return {\n    vDevices, aDevices\n  };\n}\n\nasync function getStream({\n  audioDeviceId,\n  videoDeviceId\n}: { audioDeviceId: string, videoDeviceId: string }) {\n  const stream = await mediaDevices.getUserMedia({\n    video: {\n      deviceId: videoDeviceId\n    },\n    audio: {\n      deviceId: audioDeviceId\n    }\n  });\n\n  return stream;\n}\n\nfunction App() {\n  const [peer, setPeer] = useState<Peer | null>(null);\n  const [join, setJoin] = useState(false);\n  const [room, setRoom] = useState<MeshRoom | null>(null);\n\n  const [videoDevices, setVideoDevices] = useState<MediaDeviceInfo[]>([]);\n  const [audioDevices, setAudioDevices] = useState<MediaDeviceInfo[]>([]);\n  const [videoDeviceId, setVideoDeviceId] = useState<string>('');\n  const [audioDeviceId, setAudioDeviceId] = useState<string>('');\n\n  const localVideoRef = useRef(null);\n\n  const refreshDevices = useCallback(async () => {\n    const {\n      aDevices,\n      vDevices\n    } = await getDevices();\n\n    setAudioDevices(() => aDevices);\n    setVideoDevices(() => vDevices);\n  }, []);\n\n  useEffect(() => {\n    const p = new Peer({\n      key: 'bfae4862-4740-46d1-bf51-8ee9105b83f3',\n      debug: 3\n    });\n    p.on('open', () => {\n      console.log(p.id);\n    });\n    setPeer(() => p);\n    refreshDevices();\n  }, []);\n\n  useEffect(() => {\n    (async () => {\n      const stream = await getStream({\n        audioDeviceId,\n        videoDeviceId,\n      });\n      if (stream && localVideoRef && localVideoRef.current) {\n        const video: HTMLVideoElement = localVideoRef.current;\n        video.srcObject = stream;\n        video.play();\n      }\n\n      if (room) {\n        room.replaceStream(stream);\n      }\n    })();\n  }, [audioDeviceId, videoDeviceId]);\n\n  useEffect(() => {\n    (async () => {\n      if (!join) return;\n      if (!peer || peer && !peer.open) return;\n      const stream = await getStream({\n        audioDeviceId,\n        videoDeviceId,\n      });\n      const r: MeshRoom = peer.joinRoom('test-room-id', {\n        stream\n      });\n      setRoom(() => r);\n      console.log(r);\n    })();\n  }, [join]);\n\n  return (\n    <div className=\"App\">\n      <div>\n        <label htmlFor=\"audio-devices\">\n          AudioDevice: \n        </label>\n        <select\n          id=\"audio-devices\"\n          value={audioDeviceId}\n          onChange={e => setAudioDeviceId(e.currentTarget.value)}\n        >\n          {audioDevices.map(({ deviceId, label }) => (\n            <option key={deviceId} value={deviceId}>\n              {label}\n            </option>\n          ))}\n        </select>\n      </div>\n      <div>\n        <label htmlFor=\"video-devices\">\n          VideoDevice: \n        </label>\n        <select\n          id=\"video-devices\"\n          value={videoDeviceId}\n          onChange={e => setVideoDeviceId(e.currentTarget.value)}\n        >\n          {videoDevices.map(({ deviceId, label }) => (\n            <option key={deviceId} value={deviceId}>\n              {label}\n            </option>\n          ))}\n        </select>\n      </div>\n      <div>\n        <button onClick={_=>setJoin(true)}>Join</button>\n      </div>\n      <video\n        ref={localVideoRef}\n        width=\"400px\"\n        autoPlay\n        muted\n        playsInline\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}